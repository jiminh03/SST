volumes:
  swagger-docs:
  postgres_data:
  redis_data:
  

networks:
  sst-network:
    driver: bridge

services:
  proxy:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${BASE_DIR}/proxy/nginx.conf:/etc/nginx/conf.d/default.conf
      - ${BASE_DIR}/proxy/stream.conf:/etc/nginx/stream.d/default.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - sst-network
    restart: unless-stopped

  sst-web:
    image: j13a503.p.ssafy.io:5000/sst_web:latest
    container_name: sst_web
    env_file:
      - ${BASE_DIR}/docker/secure/.env
    networks:
      - sst-network
    restart: unless-stopped

  api-docs:
    image: swaggerapi/swagger-ui:latest
    container_name: api-docs
    volumes:
      - ${BASE_DIR}/docs/sst_api.yml:/usr/share/nginx/html/sst_api.yml
    environment:
      - URL=sst_api.yml
    networks:
      - sst-network
    restart: unless-stopped

  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: project-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_ROOT_USER}
      - POSTGRES_PASSWORD=${DB_ROOT_PW}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sst-network

  redis:
    image: redis:7-alpine
    container_name: project-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - sst-network

  # turn-server:
  #   image: coturn/coturn
  #   container_name: project-turn-server
  #   restart: unless-stopped
  #   # Nginx를 통해 외부 포트를 연결할 것이므로, 내부 네트워크로만 통신합니다.
  #   networks:
  #     - sst-network
  #   volumes:
  #     # 호스트의 설정 파일을 컨테이너에 연결합니다.
  #     - ${BASE_DIR}/docker/turn/turnserver.conf:/etc/coturn/turnserver.conf:ro
  #     - coturn_data:/var/lib/turn
  #   command:
  #     # Verbose logging to help with debugging
  #     - "-v"
    
  registry:
    image: registry:2
    container_name: registry
    ports:
      - "5000:5000" 
    volumes:
      - ${BASE_DIR}:/var/lib/registry
      - ${BASE_DIR}/docker/auth:/auth
      - /etc/letsencrypt:/etc/letsencrypt:ro 
    environment:
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm"
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd
      - REGISTRY_STORAGE_DELETE_ENABLED=true
      - REGISTRY_HTTP_TLS_CERTIFICATE=/etc/letsencrypt/live/j13a503.p.ssafy.io/fullchain.pem
      - REGISTRY_HTTP_TLS_KEY=/etc/letsencrypt/live/j13a503.p.ssafy.io/privkey.pem
      - REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin=['https://j13a503.p.ssafy.io']
      - REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods=['HEAD', 'GET', 'OPTIONS', 'DELETE']
      - REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers=['Authorization', 'Accept']
      - REGISTRY_HTTP_HEADERS_Access-Control-Allow-Credentials=['true']
    networks:
      - sst-network
    restart: unless-stopped
    profiles:
      - "dev-util"

  registry-ui:
    image: joxit/docker-registry-ui:latest
    container_name: registry-ui
    ports: 
      - "8080:80"
    environment:
      - SINGLE_REGISTRY=true
      - REGISTRY_TITLE="My Private Registry"
      - DELETE_IMAGES=true
      - REGISTRY_URL=https://j13a503.p.ssafy.io:5000
    networks:
      - sst-network
    depends_on:
      - registry
    restart: unless-stopped
    profiles:
      - "dev-util"