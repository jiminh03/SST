openapi: 3.0.3
info:
  title: "Smart Home Care System API"
  version: "1.0"
  description: "독거노인 스마트 홈케어 시스템 API 명세서. IoT 센서 데이터와 AI를 활용하여 위급 상황을 감지하고 대응합니다."

servers:
  - url: "http://127.0.0.1:8000/api/v1"
    description: "로컬 개발 서버"
  - url: "https://your-domain.com/api/v1"
    description: "프로덕션 서버"

# API 그룹을 정의합니다.
tags:
  - name: "인증 (Authentication)"
    description: "사용자 회원가입, 로그인 등 인증 관련 API"
  - name: "모니터링 (Monitoring)"
    description: "어르신 상태 조회, 긴급 알림 등 모니터링 관련 API"
  - name: "IoT"
    description: "홈 허브, 센서, 로봇 등 IoT 기기 연동 API"
  - name: "AI 분석 (AI Analysis)"
    description: "생활 패턴 분석 및 재학습 관련 API"
  - name: "사용자 관리 (User Management)"
    description: "프로필 조회, 수정 등 사용자 정보 관련 API"

# API 전반에서 사용될 공통 요소를 정의합니다.
components:
  # 보안 관련 설정 (JWT Bearer Token)
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "로그인 API를 통해 발급받은 JWT Access Token을 'Bearer ' 접두사와 함께 입력합니다."

  # 공통 데이터 모델 (DTO) 정의
  schemas:
    # --- 1. 공통 응답 모델 ---
    # padoc_api를 참고하여 표준적인 성공/에러 응답 구조를 정의했습니다.
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: "응답 결과 메시지"
          example: "요청이 성공적으로 처리되었습니다."
        data:
          type: object
          nullable: true
          description: "요청에 대한 결과 데이터"

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: "에러 발생 시간"
        status:
          type: integer
          description: "HTTP 상태 코드"
        error:
          type: string
          description: "HTTP 상태 메시지"
        code:
          type: string
          description: "애플리케이션 고유 에러 코드"
        message:
          type: string
          description: "에러에 대한 상세 메시지"

    # --- 2. 프로젝트 핵심 모델 ---
    # 기능 요구사항을 바탕으로 핵심 데이터 모델의 뼈대를 만들었습니다.
    Senior:
      type: object
      description: "어르신 정보"
      properties:
        senior_id:
          type: integer
          description: "어르신 고유 ID"
          example: 1
        full_name:
          type: string
          description: "어르신 성함"
          example: "박영식"
        risk_level:
          type: string
          description: "현재 위험도"
          enum: [safe, caution, danger, unknown]
          example: "caution"
        address:
          type: string
          description: "주소"
        # ... 기타 필요한 어르신 정보 추가
      required:
        - senior_id
        - full_name
        - risk_level

    SensorEvent:
      type: object
      description: "IoT 센서 이벤트 로그"
      properties:
        timestamp:
          type: string
          format: date-time
          description: "이벤트 발생 시간"
        sensor_id:
          type: string
          description: "이벤트가 발생한 센서의 고유 ID"
          example: "living_room_motion_01"
        event_type:
          type: string
          description: "이벤트 종류"
          example: "motion_detected"
        value:
          type: object
          description: "이벤트 관련 값 (선택적)"
          nullable: true
      required:
        - timestamp
        - sensor_id
        - event_type

    LoginRequest:
      type: object
      properties:
        login_id:
          type: string
        password:
          type: string
          format: password
      required:
        - login_id
        - password

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        # ... 기타 로그인 응답 정보 추가

# 실제 API 엔드포인트를 정의합니다.
paths:
  # --- 인증 관련 API 예시 ---
  /auth/login:
    post:
      tags:
        - "인증 (Authentication)"
      summary: "로그인"
      description: "사용자 ID와 비밀번호로 로그인하고 JWT 토큰을 발급받습니다."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "로그인 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: "인증 실패"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # --- 모니터링 관련 API 예시 ---
  /seniors:
    get:
      tags:
        - "모니터링 (Monitoring)"
      summary: "전체 어르신 목록 및 상태 조회"
      description: "관리 중인 모든 어르신의 목록과 현재 위험도를 조회합니다."
      security:
        - bearerAuth: [] # 이 API는 로그인이 필요함을 명시
      responses:
        "200":
          description: "조회 성공"
          content:
            application/json:
              schema:
                type: object
                properties:
                  seniors:
                    type: array
                    items:
                      $ref: "#/components/schemas/Senior"
        "403":
          description: "권한 없음"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # --- IoT 관련 API 예시 ---
  /iot/events:
    post:
      tags:
        - "IoT"
      summary: "센서 이벤트 로그 수신"
      description: "홈 허브로부터 센서 이벤트 로그를 수신하여 데이터베이스에 저장합니다."
      # 홈 허브는 JWT 인증이 어려울 수 있으므로, API 키 등 다른 인증 방식을 고려할 수 있습니다.
      # security:
      #   - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SensorEvent"
      responses:
        "201":
          description: "로그 수신 및 저장 성공"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: "잘못된 형식의 데이터"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"