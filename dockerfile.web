# syntax=docker/dockerfile:1

# =======================================================
# Stage 1: Frontend 빌드 (Node.js 환경)
# =======================================================
FROM node:20-alpine AS frontend-builder
WORKDIR /app/frontend

# FrontEnd의 package.json을 먼저 복사하여 npm install 캐싱
COPY FrontEnd/package*.json ./
RUN npm install

# 나머지 FrontEnd 소스 코드 복사
COPY FrontEnd/ ./
# 프론트엔드 앱 빌드
RUN npm run build


# =======================================================
# Stage 2: Backend 의존성 설치 (Python 환경)
# =======================================================
FROM python:3.11-slim AS backend-builder
WORKDIR /app/backend

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

RUN pip install --upgrade pip

# 백엔드 requirements.txt 복사 및 설치
COPY BackEnd/common/requirements.txt ./common_requirements.txt
COPY BackEnd/web/requirements.txt ./web_requirements.txt

RUN --mount=type=cache,target=/root/.cache/pip pip install -r common_requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip pip install -r web_requirements.txt


# =======================================================
# Stage 3: 최종 이미지 생성 (Python 환경)
# =======================================================
FROM python:3.11-slim

# 보안을 위해 non-root 유저 생성
RUN addgroup --system app && adduser --system --group app

WORKDIR /home/app

# [backend-builder]에서 설치한 Python 패키지 복사
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# 백엔드 소스 코드 복사
COPY ./BackEnd/web ./web
COPY ./BackEnd/common ./common

# [frontend-builder]에서 빌드한 프론트엔드 결과물(dist)을 복사
# FastAPI가 서빙할 위치로 복사합니다. (예: /home/app/dist)
COPY --from=frontend-builder /app/frontend/dist ./dist

# 파일 소유권을 app 유저에게 부여
RUN chown -R app:app /home/app

# app 유저로 전환
USER app

CMD ["python","-m", "web.main"]